
Access Request Tracker Django Project
==========================================
Python Django web application hosted in Microsoft Azure. Performs CRUD operations on parent **CS096 table** and 
child **UserAccess** tables. 

Key learning points
-----------------------
    #. Use AJAX to dynamically populate cascading selects on the change event of the parent select
    #. Use fixture to seed database *manage.py* loaddata <fixture name>
    #. Use class-based views to manage database transactions
    #. Add automated documentation using Sphinx and configure NGINX to serve the HTML
    #. Add a REST api with minimal effort


Contents
----------------------
    * :ref:`views`
    * :ref:`model`
    * :ref:`diagram`
    * :ref:`sphinx`
    * :ref:`host`
    * :ref:`api`

 
.. _views:

Views Module
-------------------------


.. automodule:: trackapp.views
    :members:
    :private-members:

.. _model:

Models Module
---------------------
.. automodule:: trackapp.models
    :members: 

    
.. _diagram:

Model Diagram
---------------------
PyCharm model visualization. (ctrl-alt-u)

    .. image:: _static\\model.png   

.. _sphinx:

Configure Sphinx to Work with Django
------------------------------------------
Add the following code to conf.py...

    .. code-block:: Python

        import os
        import sys
        os.environ['DJANGO_SETTINGS_MODULE'] = '<Django app name>.settings'
        import django
        django.setup()

Add the autodoc elements to the restructued text file...

    .. code-block:: Python

        .. automodule:: trackapp.views
            :members:
            :private-members:

.. _host:

Serve a website in NGINX 
------------------------------------------  

    #. Create a folder under /etc/www//html
    #. Add the path to /etc/nginx/sites-available/default

        .. code-block:: Python

            location /docs/ {
                root /var/www/html/;

    #. Restart NGINX            

.. _api:

Add a REST API
------------------------------------------  
        .. code-block:: Python

            **url.py**
            from rest_framework import routers
            router = routers.DefaultRouter()
            router.register(r'product', views.ProductViewSet)
            url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\

            **views.py**
            class ProductViewSet(viewsets.ModelViewSet):
                queryset = Product.objects.all()
                serializer_class = ProductSerializer

            class ProtocolViewSet(viewsets.ModelViewSet):
                queryset = Protocol
                serializer_class = ProtocolSerializer

            **serializer.py**
            class ProtocolSerializer(serializers.ModelSerializer):
                class Meta:
                    model =Protocol
                    fields='__all__'


            class ProductSerializer(serializers.ModelSerializer):
                protocols=ProtocolSerializer(many=True)

                class Meta:
                    model =Product
                    fields=('id','product','protocols')



            http://py230-ubuntu0223.westus.cloudapp.azure.com/product